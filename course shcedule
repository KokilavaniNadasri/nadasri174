class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
         boolean visited[] = new boolean[numCourses];
        if(numCourses == 1 || prerequisites.length <= 1) return true;
        ArrayList<Integer> graph[] = new ArrayList[numCourses];
        for(int i = 0;i<numCourses;i++){
            graph[i] = new ArrayList<>();
        }
        for(int i = 0;i<prerequisites.length;i++){
            graph[prerequisites[i][1]].add(prerequisites[i][0]);
        }
        for(int i = 0;i<numCourses;i++){
            if(!visited[i]){
                if(detectCycle(graph, i, visited, new boolean[numCourses])){
                    return false;
                }
            }
        }
        return true;
    }
    private boolean detectCycle(ArrayList<Integer> graph[], int curr, boolean visited[], boolean stack[]){
        visited[curr] = true;
        stack[curr] = true;
        for(int i =0;i<graph[curr].size();i++){
            if(stack[graph[curr].get(i)]) return true;
            else if(!visited[graph[curr].get(i)]){
                if(detectCycle(graph, graph[curr].get(i), visited, stack)){
                    return true;
                }
            }
        }
        stack[curr] = false;
        return false;
    }
}
 
